--- a/radio/src/gui/212x64/model_display.cpp
+++ b/radio/src/gui/212x64/model_display.cpp
@@ -239,11 +239,11 @@ void menuModelDisplay(event_t event)
         else {
           for (int c=0; c<NUM_LINE_ITEMS; c++) {
             LcdFlags cellAttr = (menuHorizontalPosition==c ? attr : 0);
-            source_t & value = g_model.frsky.screens[screenIndex].lines[lineIndex].sources[c];
+            source_t * value = &g_model.frsky.screens[screenIndex].lines[lineIndex].sources[c];
             const coord_t pos[] = {DISPLAY_COL1, DISPLAY_COL2, DISPLAY_COL3};
-            drawSource(pos[c], y, value, cellAttr);
+            drawSource(pos[c], y, *value, cellAttr);
             if (cellAttr && s_editMode>0) {
-              value = checkIncDec(event, value, 0, MIXSRC_LAST_TELEM, EE_MODEL|INCDEC_SOURCE|NO_INCDEC_MARKS, isSourceAvailable);
+              *value = checkIncDec(event, *value, 0, MIXSRC_LAST_TELEM, EE_MODEL|INCDEC_SOURCE|NO_INCDEC_MARKS, isSourceAvailable);
             }
           }
           if (attr && menuHorizontalPosition == NUM_LINE_ITEMS) {
--- a/radio/src/gui/212x64/model_gvars.cpp
+++ b/radio/src/gui/212x64/model_gvars.cpp
@@ -23,28 +23,28 @@
 void editGVarValue(coord_t x, coord_t y, event_t event, uint8_t gvar, uint8_t flightMode, LcdFlags flags)
 {
   FlightModeData * fm = &g_model.flightModeData[flightMode];
-  gvar_t & v = fm->gvars[gvar];
+  gvar_t * v = &fm->gvars[gvar];
   int16_t vmin, vmax;
-  if (v > GVAR_MAX) {
-    uint8_t fm = v - GVAR_MAX - 1;
+  if (*v > GVAR_MAX) {
+    uint8_t fm = *v - GVAR_MAX - 1;
     if (fm >= flightMode) fm++;
     drawFlightMode(x, y, fm + 1, flags&(~LEFT));
     vmin = GVAR_MAX + 1;
     vmax = GVAR_MAX + MAX_FLIGHT_MODES - 1;
   }
   else {
-    drawGVarValue(x, y, gvar, v, flags);
+    drawGVarValue(x, y, gvar, *v, flags);
     vmin = GVAR_MIN + g_model.gvars[gvar].min;
     vmax = GVAR_MAX - g_model.gvars[gvar].max;
   }
 
   if (flags & INVERS) {
     if (event == EVT_KEY_LONG(KEY_ENTER) && flightMode > 0) {
-      v = (v > GVAR_MAX ? 0 : GVAR_MAX+1);
+      *v = (*v > GVAR_MAX ? 0 : GVAR_MAX+1);
       storageDirty(EE_MODEL);
     }
     else if (s_editMode > 0) {
-      v = checkIncDec(event, v, vmin, vmax, EE_MODEL);
+      *v = checkIncDec(event, *v, vmin, vmax, EE_MODEL);
     }
   }
 }
--- a/radio/src/gui/212x64/model_setup.cpp
+++ b/radio/src/gui/212x64/model_setup.cpp
@@ -1249,13 +1249,13 @@ void menuModelFailsafe(event_t event)
         s_editMode = 0;
       }
       else {
-        int16_t & failsafe = g_model.moduleData[g_moduleIdx].failsafeChannels[menuVerticalPosition];
-        if (failsafe < FAILSAFE_CHANNEL_HOLD)
-          failsafe = FAILSAFE_CHANNEL_HOLD;
-        else if (failsafe == FAILSAFE_CHANNEL_HOLD)
-          failsafe = FAILSAFE_CHANNEL_NOPULSE;
+        int16_t * failsafe = &g_model.moduleData[g_moduleIdx].failsafeChannels[menuVerticalPosition];
+        if (*failsafe < FAILSAFE_CHANNEL_HOLD)
+          *failsafe = FAILSAFE_CHANNEL_HOLD;
+        else if (*failsafe == FAILSAFE_CHANNEL_HOLD)
+          *failsafe = FAILSAFE_CHANNEL_NOPULSE;
         else
-          failsafe = 0;
+          *failsafe = 0;
       }
     }
     else {
--- a/radio/src/gui/212x64/model_telemetry.cpp
+++ b/radio/src/gui/212x64/model_telemetry.cpp
@@ -313,16 +313,16 @@ void menuModelSensor(event_t event)
       case SENSOR_FIELD_PARAM4:
       {
         drawStringWithIndex(0, y, NO_INDENT(STR_SOURCE), k-SENSOR_FIELD_PARAM1+1);
-        int8_t & source = sensor->calc.sources[k-SENSOR_FIELD_PARAM1];
+        int8_t * source = &sensor->calc.sources[k-SENSOR_FIELD_PARAM1];
         if (attr) {
-          source = checkIncDec(event, source, -MAX_TELEMETRY_SENSORS, MAX_TELEMETRY_SENSORS, EE_MODEL|NO_INCDEC_MARKS, isSensorAvailable);
+          *source = checkIncDec(event, *source, -MAX_TELEMETRY_SENSORS, MAX_TELEMETRY_SENSORS, EE_MODEL|NO_INCDEC_MARKS, isSensorAvailable);
         }
-        if (source < 0) {
+        if (*source < 0) {
           lcdDrawChar(SENSOR_2ND_COLUMN, y, '-', attr);
-          drawSource(lcdNextPos, y, MIXSRC_FIRST_TELEM+3*(-1-source), attr);
+          drawSource(lcdNextPos, y, MIXSRC_FIRST_TELEM+3*(-1-*source), attr);
         }
         else {
-          drawSource(SENSOR_2ND_COLUMN, y, source ? MIXSRC_FIRST_TELEM+3*(source-1) : 0, attr);
+          drawSource(SENSOR_2ND_COLUMN, y, *source ? MIXSRC_FIRST_TELEM+3*(*source-1) : 0, attr);
         }
         break;
       }
